"""Reports models for analytics and data exports."""

from django.db import models
from django.utils.translation import gettext_lazy as _

from core.models import BaseModel


class Report(BaseModel):
    """Generated reports for analytics."""
    
    REPORT_TYPES = [
        ('price_summary', _('Price Summary')),
        ('farmer_performance', _('Farmer Performance')),
        ('order_summary', _('Order Summary')),
        ('regional_analysis', _('Regional Analysis')),
        ('payment_summary', _('Payment Summary')),
        ('custom', _('Custom Report')),
    ]
    
    FORMAT_CHOICES = [
        ('pdf', 'PDF'),
        ('excel', 'Excel'),
        ('csv', 'CSV'),
        ('json', 'JSON'),
    ]
    
    name = models.CharField(
        max_length=200,
        verbose_name=_('Report Name')
    )
    report_type = models.CharField(
        max_length=20,
        choices=REPORT_TYPES,
        verbose_name=_('Report Type')
    )
    format = models.CharField(
        max_length=10,
        choices=FORMAT_CHOICES,
        default='pdf',
        verbose_name=_('Format')
    )
    generated_by = models.ForeignKey(
        'accounts.User',
        on_delete=models.CASCADE,
        related_name='generated_reports',
        verbose_name=_('Generated By')
    )
    parameters = models.JSONField(
        default=dict,
        blank=True,
        verbose_name=_('Report Parameters')
    )
    file_path = models.FileField(
        upload_to='reports/',
        null=True,
        blank=True,
        verbose_name=_('Report File')
    )
    status = models.CharField(
        max_length=20,
        choices=[
            ('generating', _('Generating')),
            ('completed', _('Completed')),
            ('failed', _('Failed')),
        ],
        default='generating',
        verbose_name=_('Status')
    )
    error_message = models.TextField(
        blank=True,
        verbose_name=_('Error Message')
    )
    generated_at = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name=_('Generated At')
    )
    expires_at = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name=_('Expires At')
    )
    
    class Meta:
        verbose_name = _('Report')
        verbose_name_plural = _('Reports')
        ordering = ['-created_at']
        
    def __str__(self):
        return f"{self.name} - {self.get_report_type_display()}"
