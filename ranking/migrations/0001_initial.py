# Generated by Django 5.2.5 on 2025-08-16 08:07

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("farmers", "0001_initial"),
        ("regions", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="RankingConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Configuration Name"
                    ),
                ),
                (
                    "price_weight",
                    models.DecimalField(
                        decimal_places=3,
                        default=0.4,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                        verbose_name="Price Competitiveness Weight",
                    ),
                ),
                (
                    "consistency_weight",
                    models.DecimalField(
                        decimal_places=3,
                        default=0.25,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                        verbose_name="Consistency Weight",
                    ),
                ),
                (
                    "reliability_weight",
                    models.DecimalField(
                        decimal_places=3,
                        default=0.25,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                        verbose_name="Reliability Weight",
                    ),
                ),
                (
                    "fill_rate_weight",
                    models.DecimalField(
                        decimal_places=3,
                        default=0.1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                        verbose_name="Fill Rate Weight",
                    ),
                ),
                (
                    "evaluation_window_days",
                    models.IntegerField(
                        default=30, verbose_name="Evaluation Window (Days)"
                    ),
                ),
                (
                    "min_submissions_required",
                    models.IntegerField(
                        default=5, verbose_name="Minimum Submissions Required"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, verbose_name="Is Active Configuration"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Ranking Configuration",
                "verbose_name_plural": "Ranking Configurations",
            },
        ),
        migrations.CreateModel(
            name="FarmerScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "window_start",
                    models.DateField(verbose_name="Evaluation Period Start"),
                ),
                ("window_end", models.DateField(verbose_name="Evaluation Period End")),
                (
                    "price_competitiveness",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Price Competitiveness Score",
                    ),
                ),
                (
                    "consistency_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Consistency Score",
                    ),
                ),
                (
                    "reliability_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Delivery Reliability Score",
                    ),
                ),
                (
                    "fill_rate_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Order Fill Rate Score",
                    ),
                ),
                (
                    "total_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Total Weighted Score",
                    ),
                ),
                (
                    "total_prices_submitted",
                    models.IntegerField(
                        default=0, verbose_name="Total Prices Submitted"
                    ),
                ),
                (
                    "on_time_submissions",
                    models.IntegerField(default=0, verbose_name="On Time Submissions"),
                ),
                (
                    "total_orders",
                    models.IntegerField(default=0, verbose_name="Total Orders"),
                ),
                (
                    "on_time_deliveries",
                    models.IntegerField(default=0, verbose_name="On Time Deliveries"),
                ),
                (
                    "total_quantity_ordered",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="Total Quantity Ordered",
                    ),
                ),
                (
                    "total_quantity_delivered",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="Total Quantity Delivered",
                    ),
                ),
                (
                    "computed_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Computed At"),
                ),
                (
                    "is_current",
                    models.BooleanField(default=True, verbose_name="Is Current Score"),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "farmer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scores",
                        to="farmers.farmer",
                        verbose_name="Farmer",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="farmer_scores",
                        to="regions.region",
                        verbose_name="Region",
                    ),
                ),
            ],
            options={
                "verbose_name": "Farmer Score",
                "verbose_name_plural": "Farmer Scores",
                "ordering": ["-total_score", "-computed_at"],
                "indexes": [
                    models.Index(
                        fields=["farmer", "is_current"],
                        name="ranking_far_farmer__5cfa55_idx",
                    ),
                    models.Index(
                        fields=["region", "is_current", "total_score"],
                        name="ranking_far_region__8b6277_idx",
                    ),
                    models.Index(
                        fields=["window_start", "window_end"],
                        name="ranking_far_window__c587a7_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FarmerScoreHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(verbose_name="Score Date")),
                (
                    "total_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Total Score",
                    ),
                ),
                ("rank_in_region", models.IntegerField(verbose_name="Rank in Region")),
                (
                    "total_farmers_in_region",
                    models.IntegerField(verbose_name="Total Farmers in Region"),
                ),
                (
                    "farmer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="score_history",
                        to="farmers.farmer",
                        verbose_name="Farmer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Farmer Score History",
                "verbose_name_plural": "Farmer Score Histories",
                "ordering": ["-date"],
                "unique_together": {("farmer", "date")},
            },
        ),
    ]
